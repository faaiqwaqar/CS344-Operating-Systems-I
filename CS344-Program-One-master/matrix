# !/bin/bash
# Program 1 - CS 344
# Author: Faaiq G. Waqar
# Term: Summer 2019
# Instructor: Benjamin Brewster

#Variable Declaration
#Allows Us to Organize Parameters
MATRIX="${2:-/dev/stdin}" 
MATRIX_LEFT=$2
MATRIX_RIGHT=$3
INPUT_PARAMETERS="$#"

#Dimentions Calculation Function
#Called If Parameter One is "dims"
#Outputs Height and Width Dimentions
dims_function(){
#I and K are declared indeces to read through the dims
	i=0
	while read myLine
	do
		k=0
		for j in $myLine
		do
			((k++))
		done
		((i++))
	done < $MATRIX
	echo "$i $k"
}

#Transpose Calculation Function
#Called If Parameter One is "transpose"
#Outputs a Transposed Matrix to Console
transpose_function(){
#First an array is declared, and will read in the values in order
#by level first traversal of the matrix
	declare -a my_array
	m=0
	arrIndex=0
	while read myLine
	do
		n=0
		for j in $myLine
		do
			((n++))
			my_array[$arrIndex]=$j
			((arrIndex++))
		done
		((m++))
	done < "$MATRIX"
#an indexing array is declared to arrange the values
#in the transposed order. Using loops for each level
#to calculate the appropriate index in the arrays
	declare -a index_array
	i=0
	while [ $i -lt $m  ]
	do
		j=0
		while [ $j -lt $n  ]
		do
			index1=$(($i*$n+$j))
			index2=$(($j*$m+$i))
			index_array[$index2]=$((my_array[$index1]))
			((j++))
		done
		((i++))
	done
#The values are then printed, with a counter to
#ensure the values are printed out appropriately
	counter=1
	for x in "${index_array[@]}"
	do
		printf "%d" "$x"
		if [[ $counter == $m  ]]
		then
			printf "\n"
			counter=0
		else
			printf "\t"
		fi
		((counter++))
	done
	
}

#Mean Calculation Function
#Called If Parameter One is "mean"
#Outputs the Mean of Each Column in Matrix
mean_function(){
#Initially, while reading, dimentions and the sum
#of values are calculated in the array, which will be manip
#later on in the program
	declare -a my_array
	i=0
	while read myLine
	do
		k=0
		for j in $myLine
		do
			my_array[$k]=$((my_array[$k]+j))
			((k++))
		done
		((i++))
	done < "$MATRIX"
#A loop traverses over the values, and uses the formula provided
#in the assignment description to calculate and round mean values
	m=0
	while [ $m -lt $k ]
	do
		
		my_array[$m]=$((my_array[$m] + ($i/2)*( (my_array[$m]>0)*2-1)))
		my_array[$m]=$((my_array[$m]/i))
		((m++))
	done
#values are printed, with indication of final tabbing
	m=0	
	t=$(($k-1))
	for z in "${my_array[@]}"
	do
		printf "%d" "$z"
		if [[ $m -lt $t ]]
		then
		printf "\t"
		fi
		((m++))
	done
	
	printf "\n"
}

#Add Calculation Function
#Called If Parameter One is "add"
#Takes the Sum of 2 Matrices and Outputs
add_function(){
#variable declaration of arrays and indeces
	declare -a array_one
	declare -a array_two
	declare -a array_sum
	oneIndex=0
	arrIndex=0
#read in of values of both matrices into respective
#arrays, and calculate dimentions for error handling
	while read myLine
	do
		oneCount=0
		for j in $myLine
		do
			((oneCount++))
			array_one[$arrIndex]=$j
			((arrIndex++))	
		done
		((oneIndex++))
	done < $MATRIX_LEFT

	twoIndex=0
	arrIndex=0
	while read myLine
	do
		twoCount=0
		for j in $myLine
		do
			((twoCount++))
			array_two[$arrIndex]=$j
			((arrIndex++))
		done
		((twoIndex++))
	done < $MATRIX_RIGHT

##dimentions error handling, both dimentions checked
	if [[ $oneCount != $twoCount  ]]
	then
		>&2 echo "dimentions error: add"
		exit 1
	fi

	if [[ $oneIndex != $twoIndex  ]]
	then
		>&2 echo "dimentions error: add"
		exit 1
	fi

#Sum of arrays populated into third array
	arrMax=$arrIndex
	arrIndex=0
	while [ $arrIndex -lt $arrMax  ]
	do
		array_sum[$arrIndex]=$((array_one[$arrIndex]+array_two[$arrIndex]))
		((arrIndex++))
	done
#Printing, with counter for calculation of tabbing for dims
	counter=1
	for x in "${array_sum[@]}"
	do
		printf "%d" "$x"
		if [[ $counter == $oneCount ]]
		then 
			printf "\n"
			counter=0 
		else
			printf "\t"
		fi
		((counter++))
	done
}

#Multiply Calculation Function
#Called If Parameter One is "multiply"
#Takes the product of 2 Matrices and Outputs
multiply_function(){
#Read and Dimentions checking of the two matrices
#both are given a respective array
	declare -a array_one
	declare -a array_two
	heightOne=0
	arrIndex=0
	
	while read myLine
	do
		widthOne=0
		for j in $myLine
		do
			((widthOne++))
			array_one[$arrIndex]=$j
			((arrIndex++))	
		done
		((heightOne++))
	done < $MATRIX_LEFT

	heightTwo=0
	arrIndex=0
	while read myLine
	do
		widthTwo=0
		for j in $myLine
		do
			((widthTwo++))
			array_two[$arrIndex]=$j
			((arrIndex++))
		done
		((heightTwo++))
	done < $MATRIX_RIGHT
#Error handling for the matrices calculation
	if [[ $widthOne != $heightTwo  ]]
	then
		>&2 echo "dimentions error: multiply"
		exit 1
	fi
#Multiplication! this will use 3 embedded loops to calculate indeces that must be multiplied
#and populate it into a new matrix	
	size=$(($heightOne*$widthTwo))
	declare -a array_product
	i=0
	while [ $i -lt $heightOne  ]
	do
		j=0
		while [ $j -lt $widthTwo  ]
		do
			sum=0
			k=0
			while [ $k -lt $widthOne  ]
			do
				oneIndex=$(($i*$widthOne+$k))
				twoIndex=$(($k*$widthTwo+$j))
				sum=$((array_one[$oneIndex]*array_two[$twoIndex]+$sum))
				((k++))
			done
			pIndex=$(($i*$widthTwo+$j))
			array_product[$pIndex]=$sum
			((j++))
		done
		((i++))
	done
#printing of the matrix, with respective values being indented
	counter=1
	for x in "${array_product[@]}"
	do
		printf "%d" "$x"
		if [[ $counter == $widthTwo  ]] 
		then
			printf "\n"
			counter=0
		else
			printf "\t"
		fi
		((counter++))
	done
}

#Primary Indicater Statement - Routes to Function
if [[ $1 == dims ]]
then	
#begin error handling. arguements then filesystem
	if [[ $# -ne 2  ]]
	then
		if [ -z "$MATRIX" ]
		then
			>&2 echo "arguement error: dims"
			exit 1
		elif [[ $# -gt 2  ]]
		then
			>&2 echo "arguement error: dims"
			exit 1
		fi
	fi
	
	if [ ! -f $MATRIX  ]
	then
		if [[ $# -eq 2 ]]
		then
			>&2 echo "filesystem error: dims"
			exit 1
		fi
	elif [ ! -r $MATRIX  ]
	then
		if [[ $# -eq 2 ]]
		then
			>&2 echo "fileread error: dims"
			exit 1
		fi	
	fi
#end of error handling, time for functionality
	dims_function

elif [[ $1 == transpose ]]
then
#begin error handling, arguements then filesystem
	if [[ $# -ne 2  ]]
	then
		if [ -z "$MATRIX"  ]
		then
			>&2 echo "arguement error: transpose"
			exit 1
		elif [[ $# -gt 2 ]]
		then
			>&2 echo "arguement error: transpose"
			exit 1
		fi
	fi

	if [ ! -f $MATRIX  ]
	then
		if [[ $# -eq 2  ]]
		then
			>&2 echo "filesystem error: transpose"
			exit 1
		fi
	elif [ ! -r $MATRIX  ]
	then
		if [[ $# -eq 2  ]]
		then
			>&2 echo "fileread error: transpose"
			exit 1
		fi	
	fi
#end of error handling, time for functionality
	transpose_function

elif [[ $1 == mean ]]
then
#error handling, arguements then filesystem
	if [[ $# -gt 2  ]]
	then
		if [ -z "$MATRIX" ]
		then
			>&2 echo "arguement error: mean"
			exit 1	
		elif [[ $# -gt 2 ]]
		then
			>&2 echo "arguement error: mean"
			exit 1	
		fi
	fi

	if [ ! -f $MATRIX  ]
	then
		if [[ $# -eq 2 ]]
		then
			>&2 echo "filesystem error: mean"
			exit 1
		fi
	elif [ ! -r $MATRIX  ]
	then
		if [[ $# -eq 2 ]]
		then
			>&2 echo "fileread error: mean"
			exit 1	
		fi
	fi
#end of error handling, time for functionality
	mean_function

elif [[ $1 == add ]]
then
#error handling
	if [[ $# -ne 3  ]]
	then
		>&2 echo "arguement error: add"
		exit 1	
	fi
#function
	add_function

elif [[ $1 == multiply ]]
then
#error handling
	if [[ $# -ne 3  ]]
	then
		>&2 echo "arguement error: multiply"
		exit 1	
	fi
#function
	multiply_function

else
#error handling of parameters
	>&2 echo "arguement error: command line"
	exit 1
fi
